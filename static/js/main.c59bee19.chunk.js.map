{"version":3,"sources":["api/CovidApi.jsx","componentsHome/InputCountry.jsx","componentsHome/Navbar.jsx","componentsHome/List.jsx","componentsHome/Grafs.jsx","componentsHome/Maps.jsx","pages/CovidApp.jsx","api/CountryInfoApi.jsx","componentsSingleCountry/Flag.jsx","componentsSingleCountry/GrafsCountry.jsx","componentsSingleCountry/CountryInformation.jsx","pages/SingleCountry.jsx","App.js","serviceWorker.js","index.js"],"names":["CovidApi","axios","get","then","res","props","addData","addGlobalData","Component","InputCountry","state","content","suggestions","countryData","country","data","map","element","push","console","log","onTextChange","e","value","target","length","regex","RegExp","sort","filter","v","test","setState","renderSuggestions","item","index","style","cursor","key","onClick","selectedText","handleClick","preventDefault","addCountry","changeList","ShowAll","this","InputGroup","width","Input","placeholder","onChange","InputGroupAddon","addonType","InputGroupText","NavOptions","changeRequest","sortType","Nav","tabs","NavItem","background","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","color","DropdownMenu","right","DropdownItem","CovidList","request","input","list","a","b","cases","deaths","recovered","Container","height","overflowY","to","Row","Col","textAlign","src","countryInfo","flag","alt","Grafics","globalData","dataForGraf","arrayCases","Object","entries","arrayDeaths","arrayRecovered","i","xData","dateReceived","name","split","className","fontSize","dataKey","interval","stroke","tickFormatter","tick","Intl","NumberFormat","format","strokeDasharray","type","fill","Maps","Color","Radius","Map","center","zoom","TileLayer","url","attribution","Circle","lat","long","fillColor","radius","Popup","CovidApp","valor","xs","sm","md","size","Grafs","CountryInfoApi","addCountryInfo","addCountryCases","Flag","fontFamily","countryCases","timeline","CountryInformation","now","Date","getDate","getMonth","getFullYear","date","todayCases","todayDeaths","todayRecovered","tests","dairyCases","casesPerOneMillion","deathsPerOneMillion","recoveredPerOneMillion","testsPerOneMillion","perMillion","SingleCountry","match","params","GrafsCountry","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c59bee19.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport axios from 'axios';\r\n \r\n\r\nclass CovidApi extends Component {\r\n\r\n\r\n    componentDidMount(){\r\n        axios.get('https://disease.sh/v2/countries/').then(res => {\r\n           //console.log(res.data);\r\n           this.props.addData(res)\r\n        });\r\n\r\n        axios.get('https://disease.sh/v2/historical/all').then(res => {\r\n           // console.log(res.data);\r\n            this.props.addGlobalData(res)\r\n         });\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n          <Fragment/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CovidApi","import React, { Component } from 'react';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\n\r\n\r\nclass InputCountry extends Component {\r\n\r\n    state = {\r\n        content: '',\r\n        suggestions: []\r\n    }\r\n\r\n    countryData = () => {\r\n\r\n        const country = [];\r\n\r\n        if (this.props.data !== null) {\r\n            this.props.data.map((element) => {\r\n                country.push(element.country)\r\n            })\r\n        }\r\n        console.log(country)\r\n        return country;\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if(value.length > 0){\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = this.countryData().sort().filter(v => regex.test(v))\r\n        }\r\n\r\n        this.setState(() => ({\r\n            suggestions,\r\n            content: value\r\n        }))\r\n    }\r\n\r\n    selectedText(value) {\r\n        this.setState(() => ({\r\n            content: value,\r\n            suggestions: [],\r\n        }))\r\n    }\r\n\r\n    renderSuggestions = () => {\r\n        let { suggestions } = this.state;\r\n        if(suggestions.length === 0){\r\n            return null;\r\n        }\r\n        return (\r\n            <ul >\r\n            { suggestions.map((item, index) => (<p style={{ cursor: 'pointer' }} key={index} onClick={() => this.selectedText(item)}>{item}</p>))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        this.props.addCountry(this.state.content);\r\n        this.props.changeList(false);\r\n        this.setState({\r\n            content: ''\r\n        })\r\n    }\r\n\r\n    ShowAll = () => { this.props.changeList(true) }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <InputGroup style={{ width: \"370px\" }} >\r\n                    <Input placeholder=\"insert country\" onChange={this.onTextChange} value={this.state.content} />\r\n                    <InputGroupAddon addonType=\"append\">\r\n                        <InputGroupText style={{ cursor: 'pointer' }} onClick={this.handleClick}>search</InputGroupText>\r\n                        <InputGroupText style={{ cursor: 'pointer' }} onClick={this.ShowAll}>show all</InputGroupText>\r\n                    </InputGroupAddon>\r\n                </InputGroup>\r\n                {this.renderSuggestions()}    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputCountry","import React from 'react';\r\nimport { Nav, NavItem, NavLink, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nconst NavOptions = ({ changeRequest, sortType }) => {\r\n\r\n  \r\n  const CovidCases = () => { changeRequest(\"cases\") }\r\n\r\n  const CovidDeaths = () => { changeRequest(\"deaths\") }\r\n\r\n  const CovidRecovered = () => { changeRequest(\"recovered\") }\r\n\r\n  const Largest = () => { sortType(\"Largest\") }\r\n\r\n  const Smallest = () => { sortType(\"Smallest\") }\r\n\r\n  return (\r\n    <div>\r\n      <Nav tabs>\r\n        <NavItem style={{cursor:'pointer', background:'yellow' } } onClick = { CovidCases }>\r\n          <NavLink>Cases</NavLink>\r\n        </NavItem>\r\n        <NavItem style={{cursor:'pointer', background:'red'}} onClick = { CovidDeaths }>\r\n          <NavLink>Deaths</NavLink>\r\n        </NavItem>\r\n        <NavItem style={{cursor:'pointer', background:'green'}} onClick = { CovidRecovered }>\r\n          <NavLink>Recovered</NavLink>\r\n        </NavItem>\r\n        <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret style = {{background: \"#654de5\", color: \"black\"}}>\r\n                Sort\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem onClick = { Largest }>\r\n                  Descending\r\n                </DropdownItem>\r\n                <DropdownItem onClick = { Smallest}>\r\n                  Ascending\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavOptions;","import React from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CovidList = ({ request, data, input, list, sortType }) => {\r\n\r\n\r\n    if (sortType === \"Largest\" && (request === \"cases\" || request === null)) {\r\n        data ? data.sort((a, b) => (a.cases < b.cases) ? 1 : -1) : console.log(\"no data\")\r\n    }\r\n    if (sortType === \"Smallest\" && (request === \"cases\" || request === null)) {\r\n        data ? data.sort((a, b) => (a.cases > b.cases) ? 1 : -1) : console.log(\"no data\")\r\n    }\r\n    if (sortType === \"Largest\" && request === \"deaths\") {\r\n        data ? data.sort((a, b) => (a.deaths < b.deaths) ? 1 : -1) : console.log(\"no data\")\r\n    }\r\n    if (sortType === \"Smallest\" && request === \"deaths\") {\r\n        data ? data.sort((a, b) => (a.deaths > b.deaths) ? 1 : -1) : console.log(\"no data\")\r\n    }\r\n    if (sortType === \"Largest\" && request === \"recovered\") {\r\n        data ? data.sort((a, b) => (a.recovered < b.recovered) ? 1 : -1) : console.log(\"no data\")\r\n    }\r\n    if (sortType === \"Smallest\" && request === \"recovered\") {\r\n        data ? data.sort((a, b) => (a.recovered > b.recovered) ? 1 : -1) : console.log(\"no data\")\r\n    }\r\n\r\n\r\n\r\n    const FilterCovidInfo = () => {\r\n\r\n        if (request === \"cases\" || request === null) {\r\n            return (\r\n                <div>\r\n                    {data ? (data.map((element) => {\r\n                        return (\r\n                            <Link to = {`/country/${element.country}`}>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{ color: \"black\", background: \"yellow\", textAlign: \"center\" }}> {element.cases} </p>\r\n                                </Col>         \r\n                                <Col>\r\n                                    <p style={{ textAlign: \"center\" }} key={element.country}><img src={element.countryInfo.flag} width=\"50\" alt={element.country} /></p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{ color: \"black\"}} >{element.country}</p>\r\n                                </Col>\r\n                            </Row>\r\n                            </Link>\r\n                        )\r\n                    })) : (console.log(\"can´t find any data\"))}\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        if (request === \"deaths\") {\r\n            return (\r\n                <div>\r\n                    {data ? (data.map((element) => {\r\n                        return (\r\n                            <Link to = {`/country/${element.country}`}>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{ color: \"black\", background: \"red\", textAlign: \"center\" }}> {element.deaths} </p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{ textAlign: \"center\" }} key={element.country}><img src={element.countryInfo.flag} width=\"50\" alt={element.country} /></p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{ color: \"black\"}}>{element.country}</p>\r\n                                </Col>\r\n                            </Row>\r\n                            </Link>\r\n                        )\r\n                    })) : (console.log(\"can´t find any data\"))}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (request === \"recovered\") {\r\n            return (\r\n                <div>\r\n                    {data ? (data.map((element) => {\r\n                        return (\r\n                            <Link to = {`/country/${element.country}`}>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{ color: \"black\", background: \"green\", textAlign: \"center\" }}> {element.recovered} </p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{ textAlign: \"center\" }} key={element.country}><img src={element.countryInfo.flag} width=\"50\" alt={element.country} /></p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{ color: \"black\"}}>{element.country}</p>\r\n                                </Col>\r\n                            </Row>\r\n                            </Link>\r\n                        )\r\n                    })) : (console.log(\"can´t find any data\"))}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const SingleCountry = () => {\r\n\r\n        if (request === \"cases\" || request === null) {\r\n\r\n            return (\r\n                <div>\r\n                    {data.map((element) => {\r\n                        if (element.country === input) {\r\n\r\n                            return (\r\n                                <Link to = {`/country/${element.country}`}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <p style={{ color: \"black\", background: \"yellow\", textAlign: \"center\" }}> {element.cases} </p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p style={{ textAlign: \"center\" }} key={element.country}><img src={element.countryInfo.flag} width=\"50\" alt={element.country} />\r\n                                        </p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p style={{ color: \"black\"}}>{element.country}</p>\r\n                                    </Col>\r\n                                </Row>\r\n                                </Link>\r\n                            )\r\n                        }\r\n\r\n                        return true;\r\n                    })\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (request === \"deaths\") {\r\n            return (\r\n                <div>\r\n                    {data.map((element) => {\r\n                        if (element.country === input) {\r\n\r\n                            return (\r\n                                <Link to = {`/country/${element.country}`}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <p style={{ color: \"black\", background: \"red\", textAlign: \"center\" }}> {element.deaths} </p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p style={{ textAlign: \"center\" }} key={element.country}><img src={element.countryInfo.flag} width=\"50\" alt={element.country} /></p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p style={{ color: \"black\"}}>{element.country}</p>\r\n                                    </Col>\r\n                                </Row>\r\n                                </Link>\r\n                            )\r\n                        }\r\n                        return true\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (request === \"recovered\") {\r\n            return (\r\n                <div>\r\n                    {data.map((element) => {\r\n                        if (element.country === input) {\r\n\r\n                            return (\r\n                                <Link to = {`/country/${element.country}`}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <p style={{ color:\"black\", background: \"green\", textAlign: \"center\" }}> {element.recovered} </p>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <p style={{ color: \"black\", textAlign: \"center\" }} key={element.country}><img src={element.countryInfo.flag} width=\"50\" alt={element.country} /></p>\r\n                                    </Col>\r\n                                </Row>\r\n                                </Link>\r\n                            )\r\n                        }\r\n                        return true\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container style={{  height:'400px', overflowY: 'scroll', background: \"#617069\" }}>\r\n            {list === true ? (FilterCovidInfo()) : (SingleCountry())}\r\n        </Container>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default CovidList\r\n\r\n\r\n\r\n\r\n","import React, { Fragment } from 'react';\r\nimport { XAxis, YAxis, CartesianGrid, Area, Legend, AreaChart, Tooltip } from 'recharts';\r\n\r\nconst Grafics = ({ globalData, request }) => {\r\n\r\n  const dataForGraf = [];\r\n\r\n  if (globalData !== null) {\r\n    const arrayCases = Object.entries(globalData.cases)\r\n    const arrayDeaths = Object.entries(globalData.deaths)\r\n    const arrayRecovered = Object.entries(globalData.recovered)\r\n\r\n\r\n    for (let i = 0; i < arrayCases.length; i++) {\r\n      const xData = {};\r\n      xData[\"name\"] = arrayCases[i][0]\r\n      xData[\"cases\"] = arrayCases[i][1]\r\n      xData[\"deaths\"] = arrayDeaths[i][1]\r\n      xData[\"recovered\"] = arrayRecovered[i][1]\r\n      dataForGraf.push(xData)\r\n    }\r\n\r\n    for (let i = 0; i < dataForGraf.length; i++) {\r\n\r\n      const dateReceived = dataForGraf[i].name.split(\"/\");\r\n\r\n\r\n      switch (dateReceived[0]) {\r\n        case \"1\":\r\n          dataForGraf[i].name = \"Jan\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"2\":\r\n          dataForGraf[i].name = \"Fev\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"3\":\r\n          dataForGraf[i].name = \"Mar\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"4\":\r\n          dataForGraf[i].name = \"Apr\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"5\":\r\n          dataForGraf[i].name = \"May\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"6\":\r\n          dataForGraf[i].name = \"Jun\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"7\":\r\n          dataForGraf[i].name = \"Jul\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"8\":\r\n          dataForGraf[i].name = \"Aug\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"9\":\r\n          dataForGraf[i].name = \"Sep\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"10\":\r\n          dataForGraf[i].name = \"Out\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"11\":\r\n          dataForGraf[i].name = \"Nov\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"12\":\r\n          dataForGraf[i].name = \"Dec\" + \"/\" + dateReceived[1];\r\n          break;\r\n        default:\r\n          console.log(\"wrong month\");\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  const showArea = () => {\r\n    if (request === \"cases\" || request === null) {\r\n      return <Area type=\"monotone\" dataKey=\"cases\" stroke=\"#ffcc00\" fill=\"#ffcc00\" />\r\n    }\r\n    if (request === \"deaths\") {\r\n      return <Area type=\"monotone\" dataKey=\"deaths\" stroke=\"#ff0000\" fill=\"#ff0000\" />\r\n    }\r\n    if (request === \"recovered\") {\r\n      return <Area type=\"monotone\" dataKey=\"recovered\" stroke=\"#33cc33\" fill=\"#33cc33\" />\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {globalData ?\r\n        (<Fragment>\r\n          <h1 className=\"Grafic title\" style={{ fontSize: '20px' }}>Covid world evolution since {dataForGraf[0].name}</h1>\r\n          <AreaChart width={600} height={300} data={ dataForGraf }>\r\n            <XAxis dataKey=\"name\"\r\n              interval={2}\r\n              stroke = \"black\"\r\n            />\r\n            <YAxis\r\n              tickFormatter={(tick) =>\r\n                new Intl.NumberFormat('ru-RU', {\r\n                  style: 'decimal',\r\n                }).format(tick / 1000) + 'K'} \r\n                stroke = \"black\"/>\r\n            <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n            <Tooltip />\r\n            <Legend />\r\n            {showArea()}\r\n          </AreaChart>\r\n        </Fragment>) :\r\n        (<h1>Loading...</h1>)}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Grafics","import React from \"react\";\r\nimport { Map, TileLayer, Circle, Popup } from \"react-leaflet\";\r\nimport \"./Maps.css\";\r\n\r\n\r\n\r\n\r\nfunction Maps({ request, data, input, list }) {\r\n\r\n  const Color = () => {\r\n    if (request === \"cases\" || request === null) {\r\n      return \"yellow\"\r\n    }\r\n    if (request === \"deaths\") {\r\n      return \"red\"\r\n    }\r\n    if (request === \"recovered\") {\r\n      return \"green\"\r\n    }\r\n  }\r\n\r\n  const Radius = (e) => {\r\n    if (request === \"cases\" || request === null) {\r\n      return e.cases\r\n    }\r\n    if (request === \"deaths\") {\r\n      return e.deaths\r\n    }\r\n    if (request === \"recovered\") {\r\n      return e.recovered\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Map center={[41.56, -8.39]} zoom={2}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      { data ? (data.map(e =>\r\n        <Circle\r\n          center={[\r\n            e.countryInfo.lat,\r\n            e.countryInfo.long\r\n          ]}\r\n          fillColor={Color()}\r\n          radius={Radius(e)}\r\n          color={Color()}>\r\n          <Popup>\r\n            {\"country: \" + e.country}\r\n            <br />\r\n            {\"cases: \" + e.cases}\r\n            <br />\r\n            {\"deaths: \" + e.deaths}\r\n            <br />\r\n            {\"recovered: \" + e.recovered}\r\n          </Popup>\r\n        </Circle>))\r\n        : (console.log(\"no data\"))}\r\n    </Map>\r\n  );\r\n}\r\n\r\nexport default Maps\r\n\r\n\r\n{/*inserir no futuro\r\n\r\n\r\n  {data ? (list === false ? (data.map(e => {\r\n        if (e.country === input) {\r\n          console.log(e.countryInfo.lat,\r\n                e.countryInfo.long)\r\n          return (\r\n            <Circle\r\n              center={[\r\n                e.countryInfo.lat,\r\n                e.countryInfo.long\r\n              ]}\r\n              fillColor={ Color() }\r\n              color = { Color() }\r\n              >\r\n              <Popup>\r\n                {\"country: \" + e.country}\r\n                <br />\r\n                {\"cases: \" + e.cases}\r\n                <br />\r\n                {\"deaths: \" + e.deaths}\r\n                <br />\r\n                {\"recovered: \" + e.recovered}\r\n              </Popup>\r\n            </Circle>)\r\n        }\r\n      })) : (\r\n          data.map(e =>\r\n            <Circle\r\n              center={[\r\n                e.countryInfo.lat,\r\n                e.countryInfo.long\r\n              ]}\r\n              fillColor={Color()}\r\n              radius={Radius(e)}\r\n              color = {Color()}>\r\n              <Popup>\r\n                {\"country: \" + e.country}\r\n                <br />\r\n                {\"cases: \" + e.cases}\r\n                <br />\r\n                {\"deaths: \" + e.deaths}\r\n                <br />\r\n                {\"recovered: \" + e.recovered}\r\n              </Popup>\r\n            </Circle>\r\n          )\r\n        )) :\r\n        (console.log(\"no data\"))}\r\n\r\n\r\n\r\n\r\n\r\n*/}\r\n\r\n","import React, { Component } from 'react'\r\nimport './CovidApp.css';\r\nimport CovidApi from '../api/CovidApi.jsx'\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport InputCountry from '../componentsHome/InputCountry.jsx';\r\nimport NavOptions from '../componentsHome/Navbar.jsx';\r\nimport CovidList from '../componentsHome/List.jsx';\r\nimport Grafs from '../componentsHome/Grafs.jsx'\r\nimport Maps from '../componentsHome/Maps.jsx'\r\n\r\n\r\nclass CovidApp extends Component {\r\n\r\n    state = {\r\n        data: null,\r\n        globalData: null,\r\n        request: null,\r\n        input: '',\r\n        list: true,\r\n        sortType: ''\r\n    }\r\n\r\n    addData = (res) => {\r\n        this.setState({ data: res.data })\r\n    }\r\n\r\n    addGlobalData = (res) => {\r\n        this.setState({ globalData: res.data })\r\n    }\r\n\r\n    changeRequest = (request) => {\r\n        this.setState({\r\n            request: request\r\n        })\r\n    }\r\n\r\n    addCountry = (country) => {\r\n        this.setState({\r\n            input: country\r\n        })\r\n    }\r\n\r\n    changeList = (valor) => {\r\n        this.setState({\r\n            list: valor\r\n        })\r\n    }\r\n\r\n    sortType = (sort) => {\r\n        this.setState({\r\n            sortType: sort\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n             <br/>\r\n                <h1 className=\"title\">InfoCovid</h1>\r\n                <br />\r\n                    <Container >\r\n                        <Row xs=\"1\" sm=\"1\" md=\"2\">\r\n                            <Col xs = {{ size: 12}} sm={{ size: 12 }} md = {{ size: 5 }}>\r\n                                <InputCountry\r\n                                    data={this.state.data}\r\n                                    addCountry={this.addCountry}\r\n                                    changeList={this.changeList}\r\n                                />\r\n                                <br />\r\n                                <NavOptions\r\n                                    changeRequest={this.changeRequest}\r\n                                    sortType={this.sortType}\r\n                                />\r\n                                <CovidApi\r\n                                    addData={this.addData}\r\n                                    addGlobalData={this.addGlobalData}\r\n                                />\r\n                                <CovidList\r\n                                    data={this.state.data}\r\n                                    request={this.state.request}\r\n                                    input={this.state.input}\r\n                                    list={this.state.list}\r\n                                    sortType={this.state.sortType}\r\n                                />\r\n                            </Col>\r\n                            <Col  xs = {{ size: 12}} sm={{ size: 12 }} md = {{ size: 7 }}>\r\n                                <Maps\r\n                                    data={this.state.data}\r\n                                    request={this.state.request}\r\n                                    list={this.state.list}\r\n                                    input={this.state.input} />\r\n\r\n                                <br />\r\n                                <Grafs\r\n                                    globalData={this.state.globalData}\r\n                                    request={this.state.request}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CovidApp","import React, { Component, Fragment } from 'react'\r\nimport axios from 'axios';\r\n \r\n\r\nclass CountryInfoApi extends Component {\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.country)\r\n\r\n        axios.get('https://disease.sh/v2/countries/'+ `${ this.props.country }`).then(res => {\r\n           //console.log(res.data);\r\n           this.props.addCountryInfo(res)\r\n        });\r\n\r\n\r\n        axios.get('https://disease.sh/v2/historical/' + `${ this.props.country }`).then(res => {\r\n           //console.log(res.data);\r\n           this.props.addCountryCases(res.data)\r\n        })\r\n        ;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n          <Fragment/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CountryInfoApi ","import React, { Fragment } from 'react'\r\n\r\n\r\nconst Flag = ({ countryInfo }) => {\r\n\r\n    const flagAndName = () => {\r\n        return(\r\n        <Fragment>\r\n            <p style={{ textAlign: \"center\", fontSize : \"50px\", fontFamily : \"'Anton', sans-serif\", color: \"#1b2d24\" }}>{countryInfo.data.country}</p>\r\n            <p style={{ textAlign: \"center\"}}><img src={countryInfo.data.countryInfo.flag} width=\"200px\" alt={countryInfo.data.country} /></p>\r\n        </Fragment>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div> { countryInfo ? flagAndName() : <h1>Loading...</h1> }</div>\r\n    )\r\n\r\n}\r\n\r\nexport default Flag","import React, { Fragment } from 'react';\r\nimport { XAxis, YAxis, CartesianGrid, Legend, LineChart, Tooltip, Line } from 'recharts';\r\n\r\nconst Grafics = ({ countryCases }) => {\r\n\r\n\r\n  const dataForGraf = [];\r\n\r\n  if (countryCases !== null) {\r\n\r\n    const arrayCases = Object.entries(countryCases.timeline.cases)\r\n    const arrayDeaths = Object.entries(countryCases.timeline.deaths)\r\n    const arrayRecovered = Object.entries(countryCases.timeline.recovered)\r\n\r\n\r\n    for (let i = 0; i < arrayCases.length; i++) {\r\n      const xData = {};\r\n      xData[\"name\"] = arrayCases[i][0]\r\n      xData[\"cases\"] = arrayCases[i][1]\r\n      xData[\"deaths\"] = arrayDeaths[i][1]\r\n      xData[\"recovered\"] = arrayRecovered[i][1]\r\n      dataForGraf.push(xData)\r\n    }\r\n\r\n    for (let i = 0; i < dataForGraf.length; i++) {\r\n\r\n      const dateReceived = dataForGraf[i].name.split(\"/\");\r\n\r\n\r\n      switch (dateReceived[0]) {\r\n        case \"1\":\r\n          dataForGraf[i].name = \"Jan\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"2\":\r\n          dataForGraf[i].name = \"Fev\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"3\":\r\n          dataForGraf[i].name = \"Mar\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"4\":\r\n          dataForGraf[i].name = \"Apr\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"5\":\r\n          dataForGraf[i].name = \"May\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"6\":\r\n          dataForGraf[i].name = \"Jun\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"7\":\r\n          dataForGraf[i].name = \"Jul\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"8\":\r\n          dataForGraf[i].name = \"Aug\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"9\":\r\n          dataForGraf[i].name = \"Sep\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"10\":\r\n          dataForGraf[i].name = \"Out\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"11\":\r\n          dataForGraf[i].name = \"Nov\" + \"/\" + dateReceived[1];\r\n          break;\r\n        case \"12\":\r\n          dataForGraf[i].name = \"Dec\" + \"/\" + dateReceived[1];\r\n          break;\r\n        default:\r\n          console.log(\"wrong month\");\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {countryCases ?\r\n        (<Fragment>\r\n          <h1 className=\"Grafic title\" style={{ fontSize: '20px' }}>Covid evolution since {dataForGraf[0].name}</h1>\r\n          <LineChart width={730} height={300} data={dataForGraf}>\r\n            <XAxis dataKey=\"name\"\r\n              interval={2} \r\n              stroke = \"black\"\r\n              />\r\n            <YAxis\r\n              stroke = \"black\"\r\n              tickFormatter={(tick) =>\r\n                new Intl.NumberFormat().format(tick / 1000) + 'K'} />\r\n            <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#ffcc00\" />\r\n            <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#ff0000\" />\r\n            <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#33cc33\" />\r\n          </LineChart>\r\n        </Fragment>) :\r\n        (<h1>There is no Information</h1>)}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Grafics","import React, { Fragment } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nconst CountryInformation = ({ countryInfo }) => {\r\n\r\n    const date = () => {\r\n        const now = new Date()\r\n    \r\n        return (now.getDate() + \"/\" + (now.getMonth() + 1 ) + \"/\" + now.getFullYear())\r\n        \r\n      }\r\n\r\n\r\n    const dairyCases = () => {\r\n        if (countryInfo) {\r\n            console.log(countryInfo.data)\r\n            return (\r\n                <Fragment>\r\n                    <h1 style = {{ color: \"#1b2d24\"}}> { date() }</h1>\r\n                    <p style = {{ color: \"yellow\"}}>Cases: {countryInfo.data.todayCases}</p>\r\n                    <p style = {{ color: \"red\"}}>Deaths: {countryInfo.data.todayDeaths}</p>\r\n                    <p style = {{ color: \"green\"}}>Recovered: {countryInfo.data.todayRecovered}</p>\r\n                    <p style = {{ color: \"blue\"}}>Tests: {countryInfo.data.tests }</p>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    const perMillion = () => {\r\n        if (countryInfo) {\r\n            return (\r\n                <Fragment>\r\n                    <h1 style = {{ color: \"#1b2d24\"}}>Per 1 Million</h1>\r\n                    <p style = {{ color: \"yellow\"}}>Cases per 1 Million: { countryInfo.data.casesPerOneMillion }</p>\r\n                    <p style = {{ color: \"red\"}}>Deaths per 1 Million: { countryInfo.data.deathsPerOneMillion }</p>\r\n                    <p style = {{ color: \"green\"}}>Recovered per 1 Million: { countryInfo.data.recoveredPerOneMillion }</p>\r\n                    <p style = {{ color: \"blue\"}}>Tests per 1 Million: { countryInfo.data.testsPerOneMillion }</p>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Row xs= \"1\" md = \"2\">\r\n                <Col>\r\n                    { dairyCases() }\r\n                </Col>\r\n                <Col >\r\n                    { perMillion() }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default CountryInformation","import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport CountryInfoApi from '../api/CountryInfoApi.jsx';\r\nimport Flag from '../componentsSingleCountry/Flag.jsx'\r\nimport GrafsCountry from '../componentsSingleCountry/GrafsCountry.jsx'\r\nimport CountryInformation from '../componentsSingleCountry/CountryInformation.jsx';\r\nimport \"./SingleCountry.css\";\r\n\r\nclass SingleCountry extends Component {\r\n\r\n    state = {\r\n        country: this.props.match.params.country,\r\n        countryInfo: null,\r\n        countryCases: null,\r\n\r\n    }\r\n\r\n    addCountryInfo = (data) => {\r\n        this.setState({ countryInfo: data })\r\n    }\r\n\r\n    addCountryCases = (data) => {\r\n        this.setState({ countryCases: data })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br />\r\n                <Container>\r\n                    <CountryInfoApi\r\n                        country={this.state.country}\r\n                        addCountryCases={this.addCountryCases}\r\n                        addCountryInfo={this.addCountryInfo}\r\n                    />\r\n                    <Row xs=\"1\" md = \"2\">\r\n                        <Col className=\"FlagAndName\">\r\n                            <Flag\r\n                                countryInfo={this.state.countryInfo}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"Information\">\r\n                            <CountryInformation\r\n                                countryInfo={this.state.countryInfo}\r\n                                countryCases={this.state.countryCases}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row xs=\"1\">\r\n                        <Col className=\"Map\">\r\n                            <GrafsCountry\r\n                                countryCases={this.state.countryCases}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SingleCountry;","import React from 'react';\r\nimport CovidApp from './pages/CovidApp.jsx'\r\nimport SingleCountry from './pages/SingleCountry.jsx'\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style = {{ \"background-color\" : \"#a3b6ad\"}}>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/CovidProject\"/>\r\n          </Route>\r\n          <Route path=\"/CovidProject\" exact={true} component={CovidApp} />\r\n          <Route path=\"/country/:country\" component={SingleCountry} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}